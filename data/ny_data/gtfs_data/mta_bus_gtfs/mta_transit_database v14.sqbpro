<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/cjong/Projects/python/us_transport_analysis/data/ny_data/transit_shapefile_data/MTA Transit GTFS/mta_transit_database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="2176"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,14:mainbronx_calendar"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="bronx_calendar" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="206"/><column index="2" value="79"/><column index="3" value="78"/><column index="4" value="107"/><column index="5" value="86"/><column index="6" value="60"/><column index="7" value="85"/><column index="8" value="72"/><column index="9" value="99"/><column index="10" value="91"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="mta_calendar" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="255"/><column index="2" value="79"/><column index="3" value="78"/><column index="4" value="107"/><column index="5" value="86"/><column index="6" value="60"/><column index="7" value="85"/><column index="8" value="72"/><column index="9" value="99"/><column index="10" value="91"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="mta_calendar_dates" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="1"/></sort><column_widths><column index="1" value="255"/><column index="2" value="79"/><column index="3" value="143"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="mta_calendar.csv">-- CREATE TABLE mta_calendar AS SELECT * FROM (
-- SELECT DISTINCT * FROM
-- 	(
-- 	SELECT * FROM bronx_calendar UNION
-- 	SELECT * FROM brooklyn_calendar UNION
-- 	SELECT * FROM manhattan_calendar UNION
-- 	SELECT * FROM nyc_bus_company_calendar UNION
-- 	SELECT * FROM queens_calendar UNION
-- 	SELECT * FROM staten_island_calendar
-- 	)
-- ) as t

SELECT * FROM mta_calendar mc
WHERE mc.monday = 1 AND mc.friday = 1
-- 
-- CREATE TABLE mta_calendar_dates AS SELECT * FROM (
-- SELECT DISTINCT * FROM
-- 	(
-- 	SELECT * FROM bronx_calendar_dates UNION
-- 	SELECT * FROM brooklyn_calendar_dates UNION
-- 	SELECT * FROM manhattan_calendar_dates UNION
-- 	SELECT * FROM nyc_bus_company_calendar_dates UNION
-- 	SELECT * FROM queens_calendar_dates UNION
-- 	SELECT * FROM staten_island_calendar_dates
-- 	)
-- ) as t</sql><sql name="mta_trips.csv">-- CREATE TABLE mta_trips AS SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM (
-- SELECT DISTINCT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM
-- 	(
-- 	SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM bronx_trips UNION
-- 	SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM brooklyn_trips UNION
-- 	SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM manhattan_trips UNION
-- 	SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM nyc_bus_company_trips UNION
-- 	SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM queens_trips UNION
-- 	SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM staten_island_trips
-- 	)
-- ) as t


SELECT * FROM mta_trips --LIMIT 3

select count(1)
from mta_trips

-- Open mta_trips per each shape_id, but trip_id is required to join on mta_stop_times
-- SELECT DISTINCT mt.route_id, mt.trip_id, mt.service_id, mt.shape_id -- This results in repeated rows
SELECT DISTINCT mt.route_id, mt.service_id, mt.shape_id
FROM mta_calendar mc
	INNER JOIN mta_trips mt
		ON mt.service_id = mc.service_id
		
-- Data retrieval with one trip_id per shape to join with mta_stop_times
SELECT * FROM (SELECT *,
					  ROW_NUMBER() OVER(PARTITION BY shape_id ORDER BY service_id) AS row_num
			   FROM mta_trips) as t
WHERE t.row_num = 1


-- Creating temp table with the query above
CREATE TEMP TABLE mta_trips_numbered AS SELECT * FROM ( -- It would be wiser to create a permanent table for future reference
-- CREATE TABLE mta_trips_numbered AS SELECT route_id, service_id, trip_id, trip_headsign, direction_id, shape_id FROM (
SELECT * FROM (SELECT *,
					  ROW_NUMBER() OVER(PARTITION BY shape_id ORDER BY service_id) AS row_num
			   FROM mta_trips) as t
-- WHERE t.row_num = 1
) as t

select * from mta_trips_numbered limit 6


-- Open mta_trips per each shape_id, but trip_id is required to join on mta_stop_times
SELECT DISTINCT mt.route_id, mt.trip_id, mt.service_id, mt.shape_id
FROM mta_calendar mc
	INNER JOIN mta_trips_numbered mt
		ON mt.service_id = mc.service_id
		

		
-- Open mta_trips per each shape_id, but trip_id is required to join on mta_stop_times
SELECT DISTINCT mt.route_id, mt.trip_id, mt.service_id, mt.shape_id
FROM mta_calendar mc
	INNER JOIN mta_trips_numbered mt
		ON mt.service_id = mc.service_id
		AND mt.row_num = 1
		
		
	</sql><sql name="mta_stop_times.csv">-- CREATE TABLE mta_stop_times AS SELECT * FROM (
-- SELECT DISTINCT * FROM
-- 	(
-- 	SELECT * FROM bronx_stop_times UNION
-- 	SELECT * FROM brooklyn_stop_times UNION
-- 	SELECT * FROM manhattan_stop_times UNION
-- 	SELECT * FROM nyc_bus_company_stop_times UNION
-- 	SELECT * FROM queens_stop_times UNION
-- 	SELECT * FROM staten_island_stop_times
-- 	)
-- ) as t

SELECT * FROM mta_stop_times LIMIT 8

SELECT * FROM mta_stop_times WHERE stop_sequence_from LIMIT 8


-- -- To offload calculation logic from query logic, creating a new column with a stop_sequence_to
-- -- column that is offset by minus one in mta_stop_times
-- ALTER TABLE mta_stop_times
-- ADD COLUMN stop_sequence_from INT
-- UPDATE mta_stop_times SET stop_sequence_from = stop_sequence - 1



-- Data retrieval with one trip_id per shape to join with mta_stop_times via mta_trips_numbered
SELECT DISTINCT mt.route_id, mt.service_id, mt.shape_id, mts1.stop_id, mts1.stop_sequence, mts2.stop_id, mts2.stop_sequence,
				ROUND((JULIANDAY(mts2.departure_time) - JULIANDAY(mts1.departure_time))* 1440, 2) AS transmit_time -- convert day to minutes
FROM mta_calendar mc
	INNER JOIN mta_trips_numbered mt
		ON  mt.service_id = mc.service_id
		AND mt.row_num	= 1
	INNER JOIN mta_stop_times mts1
		ON  mts1.trip_id = mt.trip_id
	INNER JOIN mta_stop_times mts2
		ON  mts2.trip_id = mt.trip_id
		AND mts2.stop_sequence_from = mts1.stop_sequence
WHERE mc.monday = 1 AND mc.friday = 1


</sql><sql name="date_filtered">
-- Data retrieval with one trip_id per shape to join with mta_stop_times via mta_trips_numbered
SELECT DISTINCT mt.route_id, mt.trip_id, mt.trip_headsign, mt.service_id, mt.shape_id, mts1.stop_id, mts1.stop_sequence, mts2.stop_id, mts2.stop_sequence,
				ROUND((JULIANDAY(mts2.departure_time) - JULIANDAY(mts1.departure_time))* 1440, 2) AS transmit_time -- convert day to minutes
FROM mta_calendar mc
	INNER JOIN mta_trips_numbered mt
		ON  mt.service_id = mc.service_id
		AND mt.row_num	= 1
	INNER JOIN mta_stop_times mts1
		ON  mts1.trip_id = mt.trip_id
	INNER JOIN mta_stop_times mts2
		ON  mts2.trip_id = mt.trip_id
		AND mts2.stop_sequence_from = mts1.stop_sequence
WHERE mc.monday = 1 AND mc.friday = 1
</sql><sql name="all_weekdays_and_weekends_with_mta_trips_numbered">
-- Data retrieval with one trip_id per shape to join with mta_stop_times via mta_trips_numbered
SELECT DISTINCT mt.route_id, mt.trip_id, mt.trip_headsign, mt.service_id, mt.shape_id, mts1.stop_id, mts1.stop_sequence, mts2.stop_id, mts2.stop_sequence,
				ROUND((JULIANDAY(mts2.departure_time) - JULIANDAY(mts1.departure_time))* 1440, 2) AS transit_time -- convert day to minutes
FROM mta_calendar mc
	INNER JOIN mta_trips_numbered mt
		ON  mt.service_id = mc.service_id
		AND mt.row_num	= 1
	INNER JOIN mta_stop_times mts1
		ON  mts1.trip_id = mt.trip_id
	INNER JOIN mta_stop_times mts2
		ON  mts2.trip_id = mt.trip_id
		AND mts2.stop_sequence_from = mts1.stop_sequence</sql><sql name="all_weekdays_and_weekends_with_mta_trips">
-- Data retrieval with one trip_id per shape to join with mta_stop_times via mta_trips_numbered
-- SELECT DISTINCT mt.route_id, mt.trip_headsign, mt.shape_id, mts1.stop_id, mts1.stop_sequence, mts2.stop_id, mts2.stop_sequence,
SELECT DISTINCT mt.route_id,
				mts1.stop_id AS from_stop_id, mts1.stop_sequence AS from_stop_sequence,
				mts2.stop_id AS to_stop_id, mts2.stop_sequence AS to_stop_sequence,
				ROUND((JULIANDAY(mts2.departure_time) - JULIANDAY(mts1.departure_time))* 1440, 2) AS transit_time -- convert day to minutes
FROM mta_calendar mc
	INNER JOIN mta_trips mt
		ON  mt.service_id = mc.service_id
	INNER JOIN mta_stop_times mts1
		ON  mts1.trip_id = mt.trip_id
	INNER JOIN mta_stop_times mts2
		ON  mts2.trip_id = mt.trip_id
		AND mts2.stop_sequence_from = mts1.stop_sequence
ORDER BY route_id</sql><sql name="mta_distinct_routes_stops_and_transit_time">CREATE TABLE mta_distinct_routes_stops_and_transit_time AS

-- Data retrieval with one trip_id per shape to join with mta_stop_times via mta_trips_numbered
-- SELECT DISTINCT mt.route_id, mt.trip_headsign, mt.shape_id, mts1.stop_id, mts1.stop_sequence, mts2.stop_id, mts2.stop_sequence,
SELECT DISTINCT mt.route_id,
				mts1.stop_id AS from_stop_id, mts1.stop_sequence AS from_stop_sequence,
				mts2.stop_id AS to_stop_id, mts2.stop_sequence AS to_stop_sequence,
				ROUND((JULIANDAY(mts2.departure_time) - JULIANDAY(mts1.departure_time))* 1440, 2) AS transit_time -- convert day to minutes
FROM mta_calendar mc
	INNER JOIN mta_trips mt
		ON  mt.service_id = mc.service_id
	INNER JOIN mta_stop_times mts1
		ON  mts1.trip_id = mt.trip_id
	INNER JOIN mta_stop_times mts2
		ON  mts2.trip_id = mt.trip_id
		AND mts2.stop_sequence_from = mts1.stop_sequence
ORDER BY route_id
-- 
select * from mta_distinct_routes_stops_and_transit_time</sql><sql name="mta_all_routes_stops_and_transit_time">CREATE TABLE mta_all_routes_stops_and_transit_time AS
-- 
-- -- Data retrieval with one trip_id per shape to join with mta_stop_times via mta_trips_numbered
-- -- SELECT DISTINCT mt.route_id, mt.trip_headsign, mt.shape_id, mts1.stop_id, mts1.stop_sequence, mts2.stop_id, mts2.stop_sequence,
SELECT mt.route_id,
	   mts1.stop_id AS from_stop_id,
	   mts1.stop_sequence AS from_stop_sequence,
	   mts2.stop_id AS to_stop_id,
	   mts2.stop_sequence AS to_stop_sequence,
	   ROUND((JULIANDAY(mts2.departure_time) - JULIANDAY(mts1.departure_time))* 1440, 2) AS transit_time -- convert day to minutes
FROM mta_calendar mc
	INNER JOIN mta_trips mt
		ON  mt.service_id = mc.service_id
	INNER JOIN mta_stop_times mts1
		ON  mts1.trip_id = mt.trip_id
	INNER JOIN mta_stop_times mts2
		ON  mts2.trip_id = mt.trip_id
		AND mts2.stop_sequence_from = mts1.stop_sequence
ORDER BY route_id
-- 
select * from mta_all_routes_stops_and_transit_time
limit 10

select count(1) from mta_all_routes_stops_and_transit_time
where (from_stop_id = 905086
OR to_stop_id = 905086)


SELECT COUNT(1) from mta_calendar
SELECT COUNT(1) from mta_trips
SELECT COUNT(1) from mta_stop_times
</sql><sql name="mta_all_stops_and_transit_time">-- CREATE TABLE mta_distinct_stops_and_transit_time AS
-- SELECT DISTINCT from_stop_id, from_stop_sequence, to_stop_id, to_stop_sequence, transit_time
-- FROM mta_all_routes_stops_and_transit_time
-- 
-- CREATE TABLE mta_all_stops_and_transit_time AS
-- SELECT from_stop_id, from_stop_sequence, to_stop_id, to_stop_sequence, transit_time
-- FROM mta_all_routes_stops_and_transit_time


select count(1)
from mta_distinct_stops_and_transit_time


SELECT count(1)
FROM mta_all_stops_and_transit_time

select count(1)
from mta_all_stops_and_transit_time
where from_stop_id = 905086
OR to_stop_id = 905086
</sql><sql name="node_and_edge_analysis">
-- instances of node, edge, and counts for each
select count(from_stop_id) as total_count_of_from_and_to,
			 from_stop_id,
			 to_stop_id
from mta_all_stops_and_transit_time
group by from_stop_id, to_stop_id



select  from_stop_id,
		to_stop_id,
		transit_time
from mta_all_stops_and_transit_time
where from_stop_id = 100014
and to_stop_id = 104087




-- node, edge, and weight
select distinct count(from_stop_id) as total_count_of_from_and_to,
				from_stop_id,
				to_stop_id,
				round(avg(transit_time), 2) as average_transit_time
from mta_all_stops_and_transit_time
group by from_stop_id, to_stop_id



-- node, edge, and weight
select distinct count(from_stop_id)
from mta_all_routes_stops_and_transit_time
where from_stop_id = 905086
OR to_stop_id = 905086


</sql><current_tab id="7"/></tab_sql></sqlb_project>
