<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/cjong/Projects/python/us_transport_analysis/data/ny_data/transit_shapefile_data/GTFS/mta_subway_data_db.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="1814"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainagency"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="MTA Subway Data Prep">-- Create an odered table to ensure data integrity for data retrieval (ie ensure that all correlating combinatiosn of stops are adjacent
CREATE TABLE stop_times_ordered AS SELECT * FROM (
SELECT * FROM stop_times ORDER BY trip_id, stop_sequence ASC
) as t

-- Adding a 'from' subway station sequence column to cachec data &amp; reduce complexity in subsequent queries
ALTER TABLE stop_times_ordered ADD COLUMN stop_sequence_from INT

-- Populating 'from' subway station sequence column. This ensures that rows with identical 'from' and 'to' stations will group together 
UPDATE stop_times_ordered SET stop_sequence_from = stop_sequence - 1

-- Creating a table that remoes route data to generate graph theory-esque 'node', 'edge', and 'weight' like data from stops, from-to direction, time, and implied total count
CREATE TABLE stops_and_transit_durations AS
SELECT st1.stop_id AS from_stop_id,
	   st1.stop_sequence AS from_stop_sequence,
	   st2.stop_id AS to_stop_id,
	   st2.stop_sequence AS to_stop_sequence,
	   ROUND((JULIANDAY(st2.departure_time) - JULIANDAY(st1.departure_time))* 1440, 2) AS transit_time -- convert day to minutes
FROM stop_times_ordered st1
	INNER JOIN stop_times_ordered st2
		ON  st2.trip_id = st1.trip_id
		AND st2.stop_sequence_from = st1.stop_sequence

----------------------------------------------------------------------------
-- Final query run that explicitly mention weight
----------------------------------------------------------------------------
SELECT *,
	   ROUND(average_transit_time / total_count_of_from_and_to *1000, 2) AS transit_weight
	FROM(
	SELECT COUNT(from_stop_id) AS total_count_of_from_and_to,
			from_stop_id,
			to_stop_id,
			ROUND(AVG(transit_time), 2) AS average_transit_time
	FROM stops_and_transit_durations
	GROUP BY from_stop_id, to_stop_id) </sql><current_tab id="0"/></tab_sql></sqlb_project>
