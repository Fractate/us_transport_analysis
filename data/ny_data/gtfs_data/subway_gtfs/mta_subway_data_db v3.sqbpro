<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/cjong/Projects/python/us_transport_analysis/data/ny_data/transit_shapefile_data/GTFS/mta_subway_data_db.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="1814"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,19:mainstops_with_stations"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="agency" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="98"/><column index="2" value="207"/><column index="3" value="162"/><column index="4" value="161"/><column index="5" value="119"/><column index="6" value="136"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="stops_and_transit_durations" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="127"/><column index="2" value="192"/><column index="3" value="104"/><column index="4" value="169"/><column index="5" value="115"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="stops_with_stations" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="57"/><column index="2" value="75"/><column index="3" value="285"/><column index="4" value="84"/><column index="5" value="90"/><column index="6" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="MTA Subway Data Prep">-- Create an odered table to ensure data integrity for data retrieval (ie ensure that all correlating combinatiosn of stops are adjacent
CREATE TABLE stop_times_ordered AS SELECT * FROM (
SELECT * FROM stop_times ORDER BY trip_id, stop_sequence ASC
) as t

-- Adding a 'from' subway station sequence column to cachec data &amp; reduce complexity in subsequent queries
ALTER TABLE stop_times_ordered ADD COLUMN stop_sequence_from INT

-- Populating 'from' subway station sequence column. This ensures that rows with identical 'from' and 'to' stations will group together 
UPDATE stop_times_ordered SET stop_sequence_from = stop_sequence - 1

-- Creating a table that remoes route data to generate graph theory-esque 'node', 'edge', and 'weight' like data from stops, from-to direction, time, and implied total count
-- Using parent station to not distinguish between directional stop_ids
CREATE TABLE stops_and_transit_durations AS
SELECT s1.parent_station AS from_stop_id,
	   st1.stop_sequence AS from_stop_sequence,
	   s2.parent_station AS to_stop_id,
	   st2.stop_sequence AS to_stop_sequence,
	   ROUND((JULIANDAY(st2.departure_time) - JULIANDAY(st1.departure_time))* 1440, 2) AS transit_time -- convert day to minutes
FROM stop_times_ordered st1
	INNER JOIN stop_times_ordered st2
		ON  st2.trip_id = st1.trip_id
		AND st2.stop_sequence_from = st1.stop_sequence
	INNER JOIN stops s1
		ON s1.stop_id = st1.stop_id
	INNER JOIN stops s2
		ON s2.stop_id = st2.stop_id

----------------------------------------------------------------------------
-- Final query run that explicitly mention weight
----------------------------------------------------------------------------
SELECT *, ROUND(average_transit_time / total_count_of_from_and_to *1000, 2) AS transit_weight
	FROM(
		SELECT COUNT(from_stop_id) AS total_count_of_from_and_to,
				sfrom.station_id AS from_station,
				sto.station_id AS to_station,
				ROUND(AVG(transit_time), 2) AS average_transit_time
		FROM stops_and_transit_durations st
			INNER JOIN stops_with_stations sfrom
				ON sfrom.stop_id = st.from_stop_id
			INNER JOIN stops_with_stations sto
				ON sto.stop_id = st.to_stop_id
		GROUP BY sfrom.station_id, sto.station_id
	)
-- SELECT *, ROUND(average_transit_time / total_count_of_from_and_to *1000, 2) AS transit_weight
-- 	FROM(
-- 		SELECT COUNT(from_stop_id) AS total_count_of_from_and_to,
-- 				sfrom.stop_name AS from_stop_name,
-- 				sto.stop_name AS to_stop_name,
-- 				ROUND(AVG(transit_time), 2) AS average_transit_time
-- 		FROM stops_and_transit_durations st
-- 			INNER JOIN stops sfrom
-- 				ON sfrom.stop_id = st.from_stop_id
-- 				AND sfrom.parent_station IS NULL
-- 			INNER JOIN stops sto
-- 				ON sto.stop_id = st.to_stop_id
-- 				AND sto.parent_station IS NULL
-- 		GROUP BY sfrom.stop_id, sto.stop_id
-- 	)
-- 	
-- SELECT *, ROUND(average_transit_time / total_count_of_from_and_to *1000, 2) AS transit_weight
-- 	FROM(
-- 		SELECT COUNT(from_stop_id) AS total_count_of_from_and_to,
-- 				from_stop_id,
-- 				to_stop_id,
-- 				ROUND(AVG(transit_time), 2) AS average_transit_time
-- 		FROM stops_and_transit_durations
-- 		GROUP BY from_stop_id, to_stop_id
-- -- 	)
			
----------------------------------------------------------------------------
-- Find Longitude and Latitude of all stops
----------------------------------------------------------------------------
SELECT s.stop_id, s.stop_name, s.stop_lat, s.stop_lon
FROM stops s
WHERE s.parent_station IS NULL
			
----------------------------------------------------------------------------
-- Finding all distinct stations
----------------------------------------------------------------------------
SELECT COUNT(1)	FROM(
		SELECT DISTINCT to_stop_id
		FROM stops_and_transit_durations
		GROUP BY from_stop_id, to_stop_id)
SELECT COUNT(1)	FROM(
		SELECT DISTINCT to_stop_id
		FROM stops_and_transit_durations
		GROUP BY from_stop_id, to_stop_id)
-- Finding all distinct stations
SELECT COUNT(1)	FROM(
		SELECT DISTINCT parent_station
		FROM stops)</sql><sql name="SQL 3">
----------------------------------------------------------------------------
-- Final query run that explicitly mention weight
----------------------------------------------------------------------------
SELECT *, ROUND(average_transit_time / total_count_of_from_and_to *1000, 2) AS transit_weight
	FROM(
		SELECT COUNT(from_stop_id) AS total_count_of_from_and_to,
				sfrom.station_id + sfrom.stop_name AS from_station,
				sto.station_id + sto.stop_name AS to_station,
				ROUND(AVG(transit_time), 2) AS average_transit_time
		FROM stops_and_transit_durations st
			INNER JOIN stops_with_stations sfrom
				ON sfrom.stop_id = st.from_stop_id
			INNER JOIN stops_with_stations sto
				ON sto.stop_id = st.to_stop_id
		GROUP BY sfrom.station_id, sto.station_id
	)
	
	
	select *
		FROM stops_and_transit_durations st
			INNER JOIN stops_with_stations sfrom
				ON sfrom.stop_id = st.from_stop_id
			INNER JOIN stops_with_stations sto
				ON sto.stop_id = st.to_stop_id
		GROUP BY sfrom.station_id, sto.station_id</sql><current_tab id="0"/></tab_sql></sqlb_project>
